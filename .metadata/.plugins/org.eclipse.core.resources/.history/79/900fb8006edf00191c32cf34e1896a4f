package com.biswa.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
public class SpringSecurityConfig extends WebSecurityConfigurerAdapter {
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		auth.inMemoryAuthentication().withUser("admin").password(encoder().encode("adminPass")).roles("ADMIN").and()
				.withUser("user").password(encoder().encode("userPass")).roles("USER");
	}

	@Bean
	public PasswordEncoder encoder() {
		return new BCryptPasswordEncoder();
	}

	/*
	 * // Authentication : User --> Roles protected void
	 * configure(AuthenticationManagerBuilder auth) throws Exception {
	 * auth.inMemoryAuthentication().passwordEncoder(org.springframework.security.
	 * crypto.password.NoOpPasswordEncoder.getInstance())
	 * .withUser("user").password("pass").roles("USER") .and()
	 * .withUser("admin").password("pass").roles("USER", "ADMIN"); }
	 */
	// Authorization : Role -> Access
	protected void configure(HttpSecurity http) throws Exception {
		http.httpBasic().and().authorizeRequests().antMatchers("/userlogin").hasRole("USER").antMatchers("/getAllEmployee")
				.hasRole("ADMIN").and().csrf().disable().headers().frameOptions().disable();
	}
}
